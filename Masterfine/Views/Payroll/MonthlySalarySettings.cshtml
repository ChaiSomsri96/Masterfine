@using System.Data
@{
    ViewData["Title"] = "MonthlySalarySettings";
}


@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
{
    @Html.AntiForgeryToken()
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>Monthly Salary Setting</h2>
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="@Url.Action("Main", "Home")">Home</a>
            </li>
            <li class="breadcrumb-item">
                <a>Payroll</a>
            </li>
            <li class="active breadcrumb-item">
                <strong>Monthly Salary Setting</strong>
            </li>
        </ol>
    </div>
    <div class="col-lg-2">

    </div>
</div>
<div class="wrapper wrapper-content">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox ">
                <div class="ibox-title">
                    <div class="ibox-tools">
                        <a class="collapse-link">
                            <i class="fa fa-chevron-up"></i>
                        </a>
                        <a class="close-link">
                            <i class="fa fa-times"></i>
                        </a>
                    </div>
                </div>
                <div class="ibox-content">
                    <div class="form-group container-fluid">
                        <div class="form-inline justify-content-end">
                            <label>Date:&nbsp;<input type="month" value="@ViewData["month"]" class="form-control form-control-sm" id="monthpicker"/></label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="ibox ">
                <div class="ibox-title">
                    <div class="ibox-tools">
                        <a class="collapse-link">
                            <i class="fa fa-chevron-up"></i>
                        </a>
                        <a class="close-link">
                            <i class="fa fa-times"></i>
                        </a>
                    </div>
                </div>
                <div class="ibox-content">
                    <table class="table table-striped table-bordered table-hover dataTables-mSalarySetting">
                        <thead>
                            <tr>
                                <th>SI No</th>
                                <th>Employee</th>
                                <th>Employee Code</th>
                                <th>Package</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                    <div class="form-group container-fluid">
                        <div class="form-inline justify-content-end">
                            <button type="button" class="btn btn-primary" id="btn_save">@ViewData["btnText"]</button>&nbsp;
                            <button type="button" class="btn btn-danger" id="btn_del" @ViewData["btnDel"]>Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@section Styles {
<environment names="Development,Staging,Production">    
    <link rel="stylesheet" href="~/lib/dataTables/datatables.min.css" />
    <link rel="stylesheet" href="~/lib/sweetalert/dist/sweetalert.css" />
</environment>
}

@section Scripts {
<environment names="Development,Staging,Production">
    <script src="~/lib/dataTables/datatables.min.js"></script>
    <script src="~/lib/dataTables/dataTables.bootstrap4.min.js"></script>
    <script src="~/lib/sweetalert/dist/sweetalert.min.js"></script>
    <script src="~/js/common.js"></script>
</environment>

    <script type="text/javascript">
        $(document).ready(function () {
            var oTable = $('.dataTables-mSalarySetting').dataTable({
                pageLength: 100,
                searching: false,
                bInfo: false,
                dom: '<"html5buttons"B>lTfgitp',
                buttons: [],
                "columnDefs": [
                    /*
                     * full[0]-SL.NO
                     * full[1]-employeeId
                     * full[2]-employeeName
                     * full[3]-employeeCode
                     * full[4]-defaultPackageId
                     * full[5]-salaryPackageId
                     * full[6]-
                     * full[7]-
                     * full[8]-
                     * full[9]~full[length]-Select Array
                     */
                    {
                        targets: [0],
                        render: function (o, v) {
                            return o;
                        },
                    },
                    {
                        targets: [1],
                        render: function (data, type, full) {
                            var employeeName = full[2];
                            return employeeName;
                        },
                    },
                    {
                        targets: [2],
                        render: function (data, type, full) {
                            var employeeCode = full[3];
                            return employeeCode;
                        },
                    },                   
                    {
                        targets: [3],
                        render: function (data, type, full) {
                            var string = "<select class='salaryPackage' style='width:100%;'>";
                            string = string + "<option value='0'>--Select--</option>";

                            for (var i = 9; i < full.length; i++) {
                                var array = full[i];
                                string = string + "<option value='" + array[0] + "'";
                                if (array[0] == full[4])
                                    string = string + ' selected';
                                string = string + ">" + array[1] + "</option>";
                            }

                            string = string + "</select>";
                            return string;
                        },
                    }
                ],
            });
            var thisMonth = $("#monthpicker").val();
            refreshTable(thisMonth);

            $("#monthpicker").on("change", null, function () {
                var cur_month = $("#monthpicker").val();                
                refreshTable(cur_month);                
            })

            $("#btn_save").on("click", null, function () { 
                var cur_month = $("#monthpicker").val();
                var btnStatus = $(this).text();

                var dataArray = [];
                $(".dataTables-mSalarySetting tbody tr").each(function () {
                    var data = oTable.fnGetData(this);
                    var salary_package_value = $(this).find("td select").val();
                    if (salary_package_value == null)
                        salary_package_value = data[4];
                    dataArray.push({
                        employeeId: data[1], defaultPackageId: data[4], salaryPackageId: data[5],
                        monthlySalaryId: data[6], monthlySalaryDetailsId: data[7], selectedSalaryPackageId: salary_package_value
                    });
                });
                
                var jsonData = JSON.stringify(dataArray);

                swal({
                    title: "Are you sure?",
                    text: "You will be able to " + btnStatus.toLowerCase() + " these data!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, " + btnStatus.toLowerCase() + " it!",
                    closeOnConfirm: false
                }, function () {
                    var form = $('#__AjaxAntiForgeryForm');
                    var token = $('input[name="__RequestVerificationToken"]', form).val();
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("SaveOrEditMonthlySalarySettings")",
                        data: {
                            __RequestVerificationToken: token,
                            month: cur_month,
                            btnStatus: btnStatus,
                            tableData: jsonData
                        },
                        dataType: "json",
                        success: function (response) {
                            if (response["success"] == "false") {
                                if (response["method"] == "save")
                                    swal("Failed", "Can't save Monthly salary settings without atleast one employee with complete details", "warning");
                                else
                                    swal("Failed", "Can't update Monthly salary settings without atleast one employee with complete details", "warning");
                            }
                            else {
                                if (response["ex"] == "no") {
                                    refreshTable(cur_month);
                                    swal(btnStatus + "!", "Attendance data has been " + btnStatus.toLowerCase() + "d.", "success");
                                }
                                else
                                    alert(response["ex"]);
                            }
                        },
                        error: function (req, status, error) {
                            swal("Failed", "Connection Error", "warning");
                        }
                    });
                });
            })

            $("#btn_del").on("click", null, function () {
                var cur_month = $("#monthpicker").val();
                swal({
                    title: "Are you sure?",
                    text: "You will not be able to recover these data!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, delete it!",
                    closeOnConfirm: false
                }, function () {
                    var form = $('#__AjaxAntiForgeryForm');
                    var token = $('input[name="__RequestVerificationToken"]', form).val();
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("DeleteMonthlySalarySettings")",
                        data: {
                            __RequestVerificationToken: token,
                            month: cur_month,
                        },
                        dataType: "json",
                        success: function (response) {
                            if (response["success"] == "false") {
                                swal("Failed", "Not found", "warning");
                            }
                            else {
                                if (response["ex"] == "no") {
                                    refreshTable(cur_month);
                                    swal("Delete!", "Deleted successfully", "success");
                                }
                                else
                                    alert(response["ex"]);

                            }
                        },
                        error: function (req, status, error) {
                            swal("Failed", "API Server Connection Error", "warning");
                        }
                    });

                });
            })

            function refreshTable(month) {
                oTable.fnClearTable(false);
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetMonthlySalarySettingsDetails")",
                    data: {
                        month: month,                        
                    },
                    dataType: "json",
                    success: function (response) {
                        if (response["success"] == "false") {
                            swal("Failed", "Not found", "warning");
                        }
                        else {
                            var tbObj = JSON.parse(response["tableData"]);
                            var comboObj = JSON.parse(response["comboData"]);

                            var comboArray = [];
                            for (var i = 0; i < comboObj.length; i++) {
                                comboArray.push(ConvertObjectToArray(comboObj[i]));
                            }

                            for (var i = 0; i < tbObj.length; i++) {
                                var tbArray = ConvertObjectToArray(tbObj[i]);
                                var rowArray = tbArray.concat(comboArray);
                                oTable.fnAddData(rowArray);

                                if (!isNaN(tbArray[7]))
                                    oTable.$('tr:eq(' + i + ")").css('backgroundColor', 'rgb(135, 234, 179)');
                            }

                            CheckSelect(tbObj, comboObj);

                            if (tbObj.length <= 0){
                                $("#btn_save").attr('disabled', true);
                            }
                            else if (response["btnStatus"] == "Update") {
                                $("#btn_save").text("Update");
                                $("#btn_save").attr('disabled', false);
                                $("#btn_del").attr('disabled', false);
                            }
                            else {
                                $("#btn_save").text("Save");
                                $("#btn_save").attr('disabled', false);
                                $("#btn_del").attr('disabled', true);
                            }
                        }
                    },
                    error: function (req, status, error) {
                        swal("Failed", "API Server Connection Error", "warning");
                    }
                });
            }

            function CheckSelect(tbObj, comboObj) {
                for (var i = 0; i < tbObj.length; i++) {
                    var isSelected = false;
                    for (var j = 0; j < comboObj.length; j++) {
                        if (tbObj[i]['defaultPackageId'] == comboObj[j]['salaryPackageId']) {
                            isSelected = true;
                            break;
                        }
                    }
                    if (!isSelected) {
                        oTable.$('tr:eq(' + i + ')').find('td select').val(tbObj[i]['defaultPackageId']);
                    }
                }
            }
        });


    </script>
}